#include "QLyHeThongSanTheThao.h"
#include <fstream>

using namespace std;
#include "QlyHeThongSanTheThao.h"
#include <fstream>

using namespace std;

/*// Constructor
QlyHeThongSanTheThao::QlyHeThongSanTheThao() {
    totalFields = 0;
}

// Destructor (Gi·∫£i ph√≥ng b·ªô nh·ªõ)
QlyHeThongSanTheThao::~QlyHeThongSanTheThao() {
    for (int i = 0; i < totalFields; i++) {
        delete list[i];
    }
}

// Th√™m s√¢n m·ªõi
void QlyHeThongSanTheThao::themSan(HeThongSanTheThao* san) {
    if (totalFields < 100) {
        list[totalFields] = san;
        totalFields++;
    } else {
        cout << "Kh√¥ng th·ªÉ th√™m s√¢n m·ªõi, danh s√°ch ƒë√£ ƒë·∫ßy!" << endl;
    }
}

// Hi·ªÉn th·ªã danh s√°ch s√¢n
void QlyHeThongSanTheThao::hienThiTatCaSan() {
    cout << "\nüì¢ Danh s√°ch s√¢n th·ªÉ thao:\n";
    for (int i = 0; i < totalFields; i++) {
        list[i]->output();
    }
}

// S·∫Øp x·∫øp s√¢n theo gi·ªù ho·∫°t ƒë·ªông (Selection Sort)
void QlyHeThongSanTheThao::sapXepTheoGio() {
    for (int i = 0; i < totalFields - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < totalFields; j++) {
            if (list[j]->getGioHoatDong() < list[minIndex]->getGioHoatDong()) {
                minIndex = j;
            }
        }
        swap(list[i], list[minIndex]);
    }
}

// S·∫Øp x·∫øp s√¢n theo gi√° thu√™ (Selection Sort)
void QlyHeThongSanTheThao::sapXepTheoTien() {
    for (int i = 0; i < totalFields - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < totalFields; j++) {
            if (list[j]->getGiaThue() < list[minIndex]->getGiaThue()) {
                minIndex = j;
            }
        }
        swap(list[i], list[minIndex]);
    }
}

// T√≠nh t·ªïng ti·ªÅn thu ƒë∆∞·ª£c t·ª´ s√¢n
float QlyHeThongSanTheThao::tinhTongTienThuDuoc() {
    float total = 0;
    for (int i = 0; i < totalFields; i++) {
        total += list[i]->GiaThue() * list[i]->SoGioThue();
    }
    return total;
}

// T√¨m s√¢n theo t√™n
HeThongSanTheThao* QlyHeThongSanTheThao::timSanTheoTen(string ten) {
    for (int i = 0; i < totalFields; i++) {
        if (list[i]->getTenSan() == ten) {
            return list[i];
        }
    }
    return nullptr;
}

// X√≥a s√¢n theo m√£ ID
void QlyHeThongSanTheThao::xoaSanTheoMa(int id) {
    for (int i = 0; i < totalFields; i++) {
        if (list[i]->getID() == id) {
            delete list[i];
            for (int j = i; j < totalFields - 1; j++) {
                list[j] = list[j + 1];
            }
// C·∫≠p nh·∫≠t gi√° thu√™ s√¢n theo ID
void QlyHeThongSanTheThao::capNhatGiaThue(int id, float newPrice) {
    for (int i = 0; i < totalFields; i++) {
        if (list[i]->getID() == id) {
            list[i]->setGiaThue(newPrice);
            cout << "üì¢ Gi√° thu√™ s√¢n ID " << id << " ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh " << newPrice << "K/h\n";
            return;
        }
    }
    cout << "Kh√¥ng t√¨m th·∫•y s√¢n ID " << id << endl;
}

// ƒê·∫øm s·ªë l∆∞·ª£ng s√¢n theo lo·∫°i (B√≥ng ƒë√°, c·∫ßu l√¥ng, pickleball...)
int QlyHeThongSanTheThao::demSoSanTheoLoai(string loai) {
    int count = 0;
    for (int i = 0; i < totalFields; i++) {
        if (list[i]->getLoaiSan() == loai) {
            count++;
        }
    }
    return count;
}

// Ghi to√†n b·ªô danh s√°ch s√¢n v√†o file .txt
void QlyHeThongSanTheThao::luuDanhSachRaFile() {
    ofstream outFile("SanBong.txt");
    for (int i = 0; i < totalFields; i++) {
        outFile << list[i]->getID() << " " << list[i]->getTenSan() << " "
                << list[i]->getLoaiSan() << " " << list[i]->getGiaThue() << endl;
    }
    outFile.close();
    cout << "üì¢ Danh s√°ch s√¢n ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file SanBong.txt\n";
}

// ƒê·ªçc danh s√°ch s√¢n t·ª´ file .txt
void QlyHeThongSanTheThao::taiDanhSachTuFile() {
    ifstream inFile("SanBong.txt");
    int id;
    string tenSan, loaiSan;
    float giaThue;
    
    cout << "\nüì¢ ƒê·ªçc danh s√°ch s√¢n t·ª´ file:\n";
    while (inFile >> id >> tenSan >> loaiSan >> giaThue) {
        cout << "S√¢n ID: " << id << ", T√™n: " << tenSan << ", Lo·∫°i: " << loaiSan << ", Gi√° thu√™: " << giaThue << "K/h\n";
    }
    inFile.close();
}

// Hi·ªÉn th·ªã danh s√°ch s√¢n theo lo·∫°i (B√≥ng ƒë√°, c·∫ßu l√¥ng...)
void QlyHeThongSanTheThao::hienThiTheoLoai(string loai) {
    cout << "\nüì¢ Danh s√°ch s√¢n lo·∫°i: " << loai << endl;
    for (int i = 0; i < totalFields; i++) {
        if (list[i]->getLoaiSan() == loai) {
            list[i]->output();
        }
    }
}

// Th·ªëng k√™ s·ªë l∆∞·ª£ng s√¢n theo t·ª´ng lo·∫°i
void QlyHeThongSanTheThao::thongKeSoLuongTheoLoai() {
    cout << "\nüì¢ Th·ªëng k√™ s·ªë l∆∞·ª£ng s√¢n theo t·ª´ng lo·∫°i:\n";
    cout << "B√≥ng ƒë√° 5 ng∆∞·ªùi: " << demSoSanTheoLoai("B√≥ng ƒë√° 5") << " s√¢n\n";
    cout << "B√≥ng ƒë√° 7 ng∆∞·ªùi: " << demSoSanTheoLoai("B√≥ng ƒë√° 7") << " s√¢n\n";
    cout << "C·∫ßu l√¥ng: " << demSoSanTheoLoai("C·∫ßu l√¥ng") << " s√¢n\n";
}

// Th·ªëng k√™ doanh thu theo lo·∫°i s√¢n
void QlyHeThongSanTheThao::thongKeDoanhThuTheoLoai() {
    float doanhThuBong5 = 0, doanhThuBong7 = 0, doanhThuCauLong = 0;
    
    for (int i = 0; i < totalFields; i++) {
        if (list[i]->getLoaiSan() == "B√≥ng ƒë√° 5") {
            doanhThuBong5 += list[i]->getGiaThue() * list[i]->getSoGioThue();
        } else if (list[i]->getLoaiSan() == "B√≥ng ƒë√° 7") {
            doanhThuBong7 += list[i]->getGiaThue() * list[i]->getSoGioThue();
        } else if (list[i]->getLoaiSan() == "C·∫ßu l√¥ng") {
            doanhThuCauLong += list[i]->getGiaThue() * list[i]->getSoGioThue();
        }
    }

    cout << "\nüì¢ Th·ªëng k√™ doanh thu theo lo·∫°i s√¢n:\n";
    cout << "Doanh thu B√≥ng ƒë√° 5 ng∆∞·ªùi: " << doanhThuBong5 << "K\n";
    cout << "Doanh thu B√≥ng ƒë√° 7 ng∆∞·ªùi: " << doanhThuBong7 << "K\n";
    cout << "Doanh thu C·∫ßu l√¥ng: " << doanhThuCauLong << "K\n";
}

// Th·ªëng k√™ s√¢n theo kho·∫£ng gi√°
void QlyHeThongSanTheThao::thongKeTheoKhoangGia(float min, float max) {
    cout << "\nüì¢ Danh s√°ch s√¢n c√≥ gi√° thu√™ t·ª´ " << min << "K ƒë·∫øn " << max << "K:\n";
    for (int i = 0; i < totalFields; i++) {
        if (list[i]->getGiaThue() >= min && list[i]->getGiaThue() <= max) {
            list[i]->output();
        }
    }
}*/